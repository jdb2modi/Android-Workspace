package com.zaptech.networkingdemo;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import android.app.Activity;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

public class HomeActivity extends Activity implements OnClickListener {
	private static final String DEBUG_TAG = "HttpExample";
	private EditText urlText;
	private TextView textView;
	private Button btnGetStream;
	StringBuilder sb;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_home);
		urlText = (EditText) findViewById(R.id.edURL);
		textView = (TextView) findViewById(R.id.tvURL);
		btnGetStream = (Button) findViewById(R.id.btnSubmit);
		btnGetStream.setOnClickListener(this);
		// btnClear.setOnClickListener(this);
	}

	// When user clicks button, calls AsyncTask.
	// Before attempting to fetch the URL, makes sure that there is a network
	// connection.
	public void myClickHandler() {
		// Gets the URL from the UI's text field.
		// String stringUrl = urlText.getText().toString();
		String stringUrl = urlText.getText().toString();
		ConnectivityManager connMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
		if (networkInfo != null && networkInfo.isConnected()) {
			new DownloadWebpageTask().execute(stringUrl);
		} else {
			textView.setText("No network connection available.");
		}
	}

	// Uses AsyncTask to create a task away from the main UI thread. This task
	// takes a
	// URL string and uses it to create an HttpUrlConnection. Once the
	// connection
	// has been established, the AsyncTask downloads the contents of the webpage
	// as
	// an InputStream. Finally, the InputStream is converted into a string,
	// which is
	// displayed in the UI by the AsyncTask's onPostExecute method.
	private class DownloadWebpageTask extends AsyncTask<String, Void, String> {
		@Override
		protected String doInBackground(String... urls) {

			// params comes from the execute() call: params[0] is the url.
			try {
				return downloadUrl(urls[0]);
			} catch (IOException e) {
				urlText.setText("");
				return "Unable to retrieve web page. URL may be invalid.";
			}
		}

		// onPostExecute displays the results of the AsyncTask.
		@Override
		protected void onPostExecute(String result) {
			textView.setText(result);
			urlText.setText(result);
		}
	}

	// Given a URL, establishes an HttpUrlConnection and retrieves
	// the web page content as a InputStream, which it returns as
	// a string.
	private String downloadUrl(String myurl) throws IOException {
		InputStream is = null;
		// Only display the first 500 characters of the retrieved
		// web page content.
		int len = 500;

		try {
				URL url = new URL(myurl);
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
				conn.setReadTimeout(10000 /* milliseconds */);
				conn.setConnectTimeout(15000 /* milliseconds */);
				conn.setRequestMethod("GET");
				conn.setDoInput(true);
				// Starts the query
				conn.connect();
				int response = conn.getResponseCode();
				Log.d(DEBUG_TAG, "The response is: " + response);
				is = conn.getInputStream();

			// Convert the InputStream into a string
			/*
			 * String contentAsString = String.valueOf(is); return
			 * contentAsString;
			 */
			// //////////////
				if (is != null)
				{
					BufferedReader br = null;
					sb = new StringBuilder();

					String line;
					try 
					{
						br = new BufferedReader(new InputStreamReader(is));
						while ((line = br.readLine()) != null) 
						{
							sb.append(line);
						}
					}
					catch (Exception e) 
					{
						e.printStackTrace();
					}

				// /////////////
				// Makes sure that the InputStream is closed after the app is
				// finished using it.
			}
		} finally {
			if (is != null) {
				is.close();
			}
		}
		return sb.toString();
	}

	public void clear() {
		urlText.setText("");
		textView.setText("InputStream will display here..");
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.btnSubmit:
			myClickHandler();
			break;
		/*
		 * case R.id.btnClear: clear(); break;
		 */
		default:
			break;
		}

	}
}