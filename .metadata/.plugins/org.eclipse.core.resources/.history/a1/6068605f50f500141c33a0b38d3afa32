package com.zaptech.moneymanager;

import java.util.ArrayList;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class DBHelper extends SQLiteOpenHelper {

	public static final String DB = "jmoney.db";

	public static final String TB = "tbMoney";
	public static final String TBINCOMEHISTORY = "tbIncomeHistory";
	public static final String TBEXPENCEHISTORY = "tbExpenceHistory";

	public static final String COL_ID = "Id";
	public static final String COL_TITLE = "Title";
	public static final String COL_INCOME = "Income";
	public static final String COL_EXPENCE = "Expence";
	public static final String COL_BALANCE = "Balance";
	public static final String COL_DESCRIPTION = "Description";
	SQLiteDatabase db;
	ContentValues values;
	Cursor cursor;
	float expence;

	float bal;
	ArrayList<ExpenceHistoryModel> eHistoryModelList = new ArrayList<ExpenceHistoryModel>();
	ArrayList<IncomeHistoryModel> iHistoryModelList = new ArrayList<IncomeHistoryModel>();

	IncomeHistoryModel ihModel;

	public DBHelper(Context context) {
		super(context, DB, null, 1);

	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		String CREATE_TABLE_TB = "CREATE TABLE " + TB + "(" + COL_ID
				+ " INTEGER PRIMARY KEY," + COL_INCOME + " INTEGER,"
				+ COL_EXPENCE + " INTEGER," + COL_BALANCE + " INTEGER);";
		String CREATE_TABLE_INCOME_HISTORY = "CREATE TABLE " + TBINCOMEHISTORY
				+ "(" + COL_ID + " INTEGER PRIMARY KEY," + COL_TITLE
				+ " VARCHAR," + COL_INCOME + " INTEGER," + COL_DESCRIPTION
				+ " VARCHAR);";
		String CREATE_TABLE_EXPENCE_HISTORY = "CREATE TABLE "
				+ TBEXPENCEHISTORY + "(" + COL_ID + " INTEGER PRIMARY KEY,"
				+ COL_TITLE + " VARCHAR," + COL_EXPENCE + " INTEGER,"
				+ COL_DESCRIPTION + " VARCHAR);";
		db.execSQL(CREATE_TABLE_TB);
		db.execSQL(CREATE_TABLE_INCOME_HISTORY);
		db.execSQL(CREATE_TABLE_EXPENCE_HISTORY);
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

	}

	public SQLiteDatabase getDB() {
		db = getWritableDatabase();
		return db;
	}

	public void insertIncomeHistory(String title, int income, String description) {
		db = getDB();
		values = new ContentValues();
		values.put(COL_TITLE, title);
		values.put(COL_INCOME, income);
		values.put(COL_DESCRIPTION, description);
		db.insert(TBINCOMEHISTORY, null, values);

		// TO UPDATE DATA OF TABLE "TB"...when income is added.

		ContentValues v2 = new ContentValues();
		String sql = "SELECT * FROM " + TB;
		Cursor cursor = db.rawQuery(sql, null);
		if (cursor.moveToFirst()) {
			bal = cursor.getInt(cursor.getColumnIndex(COL_BALANCE));
			float income2 = cursor.getInt(cursor.getColumnIndex(COL_INCOME));
			expence = cursor.getInt(cursor.getColumnIndex(COL_EXPENCE));
			float temp;
			bal += income;

			income2 += income;
			v2.put(COL_EXPENCE, expence);
			v2.put(COL_BALANCE, bal);
			v2.put(COL_INCOME, income2);
			db.update(TB, v2, "id != 0", null);
		} else {
			bal = 0;
			bal += income;
			v2.put(COL_EXPENCE, 0);
			v2.put(COL_BALANCE, bal);
			v2.put(COL_INCOME, income);
			db.insert(TB, null, v2);
		}

	}

	public void insertExpenceHistory(String title, int expence,
			String description) {
		db = getDB();
		values = new ContentValues();
		values.put(COL_TITLE, title);
		values.put(COL_EXPENCE, expence);
		values.put(COL_DESCRIPTION, description);
		db.insert(TBEXPENCEHISTORY, null, values);

		// TO UPDATE DATA OF TABLE "TB"...when expence is added.

		ContentValues v2 = new ContentValues();
		String sql = "SELECT * FROM " + TB;
		Cursor cursor = db.rawQuery(sql, null);
		if (cursor.moveToFirst()) {
			bal = cursor.getInt(cursor.getColumnIndex(COL_BALANCE));
			float income = cursor.getInt(cursor.getColumnIndex(COL_INCOME));
			float expence2 = cursor.getInt(cursor.getColumnIndex(COL_EXPENCE));
			float temp;
			bal -= expence;

			expence2 += expence;
			v2.put(COL_EXPENCE, expence2);
			v2.put(COL_BALANCE, bal);
			v2.put(COL_INCOME, income);
			db.update(TB, v2, "id != 0", null);
		} else {
			bal = 0;
			bal -= expence;
			v2.put(COL_EXPENCE, expence);
			v2.put(COL_BALANCE, bal);
			v2.put(COL_INCOME, 0);
			db.insert(TB, null, v2);
		}

	}

	public void clearIncomeHistory() {
		db = getDB();
		db.delete(TBINCOMEHISTORY, null, null);
	}

	public void clearExpenceHistory() {
		db = getDB();
		db.delete(TBEXPENCEHISTORY, null, null);
	}

	public void clearAllHistory() {
		db = getDB();
		db.delete(TB, null, null);
		db.delete(TBEXPENCEHISTORY, null, null);
		db.delete(TBINCOMEHISTORY, null, null);
	}

	public ArrayList<ExpenceHistoryModel> displayExpenceHistory() {
		eHistoryModelList.clear();
		db = getDB();

		String sql = "SELECT * FROM " + TBEXPENCEHISTORY;
		cursor = db.rawQuery(sql, null);
		if (cursor.moveToFirst()) {
			do {
				ExpenceHistoryModel ehModel = new ExpenceHistoryModel();
				ehModel.setTitle(cursor.getString(cursor
						.getColumnIndex(COL_TITLE)));
				ehModel.setAmount(cursor.getInt(cursor
						.getColumnIndex(COL_EXPENCE)));
				ehModel.setDescription(cursor.getString(cursor
						.getColumnIndex(COL_DESCRIPTION)));
				eHistoryModelList.add(ehModel);
			} while (cursor.moveToNext());
		}
		return eHistoryModelList;
	}

	public ArrayList<IncomeHistoryModel> displayIncomeHistory() {
		db = getDB();

		String sql = "SELECT * FROM " + TBINCOMEHISTORY;
		cursor = db.rawQuery(sql, null);
		if (cursor.moveToFirst()) {
			do {
				ihModel = new IncomeHistoryModel();
				String strTitle = cursor.getString(cursor
						.getColumnIndex(COL_TITLE));
				String strAmount = cursor.getString(cursor
						.getColumnIndex(COL_INCOME));
				String strDescription = cursor.getString(cursor
						.getColumnIndex(COL_DESCRIPTION));

				ihModel.setTitle(strTitle);
				ihModel.setAmount(Integer.parseInt(strAmount));
				ihModel.setDescription(strDescription);
				iHistoryModelList.add(ihModel);
			} while (cursor.moveToNext());
		}
		return iHistoryModelList;
	}

	public void getData() {
		db = getDB();
		String sql = "SELECT * FROM " + TB;
		Cursor cursor = db.rawQuery(sql, null);
		if (cursor != null) {
			if (cursor.moveToFirst()) {
				do {
					
					String temp=String.valueOf(
							cursor.getInt(cursor.getColumnIndex(COL_BALANCE)))
							.toString()+
					String.valueOf(
							cursor.getInt(cursor.getColumnIndex(COL_EXPENCE)))
							.toString()+String.valueOf(
							cursor.getInt(cursor.getColumnIndex(COL_INCOME)))
							.toString());
				} while (cursor.moveToNext());

			}
		}
	}
}
