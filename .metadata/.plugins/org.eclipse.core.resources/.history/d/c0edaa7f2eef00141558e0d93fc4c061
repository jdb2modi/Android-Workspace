package com.zaptech.networkingdemo;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONObject;

import android.app.Activity;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

public class HomeActivity extends Activity implements OnClickListener {
	private static final String DEBUG_TAG = "HttpExample";
	private EditText urlText;
	private TextView textView;
	private Button btnGetStream;
	StringBuilder sb;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_home);
		urlText = (EditText) findViewById(R.id.edURL);
		textView = (TextView) findViewById(R.id.tvURL);
		btnGetStream = (Button) findViewById(R.id.btnSubmit);
		btnGetStream.setOnClickListener(this);
		// btnClear.setOnClickListener(this);
	}

	public void myClickHandler() {
		String stringUrl = urlText.getText().toString();
		ConnectivityManager connMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
		if (networkInfo != null && networkInfo.isConnected()) {
			new DownloadWebpageTask().execute(stringUrl);
		} else {
			textView.setText("No network connection available.");
		}
	}

	private class DownloadWebpageTask extends AsyncTask<String, Void, String> {
		@Override
		protected String doInBackground(String... urls) {
			try {
				return downloadUrl(urls[0]);
			} catch (IOException e) {
				urlText.setText("");
				return "Unable to retrieve web page. URL may be invalid.";
			}
		}

		@Override
		protected void onPostExecute(String result) {

			urlText.setText(result);
			jsonParsing();
			
		}
	}
	public void jsonParsing(){
		String str=urlText.getText().toString();
		JSONObject jObj1=new JSONObject("hih");
	}
	private String downloadUrl(String myurl) throws IOException {
		InputStream is = null;
		int len = 500;

		try {
			URL url = new URL(myurl);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setReadTimeout(10000 /* milliseconds */);
			conn.setConnectTimeout(15000 /* milliseconds */);
			conn.setRequestMethod("GET");
			conn.setDoInput(true);
			// Starts the query
			conn.connect();
			int response = conn.getResponseCode();
			Log.d(DEBUG_TAG, "The response is: " + response);
			is = conn.getInputStream();
	
			if (is != null) {
				BufferedReader br = null;
				sb = new StringBuilder();

				String line;
				try {
					br = new BufferedReader(new InputStreamReader(is));
					while ((line = br.readLine()) != null) {
						sb.append(line);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		} finally {
			if (is != null) {
				is.close();
			}
		}
		return sb.toString();
	}

	public void clear() {
		urlText.setText("");
		textView.setText("InputStream will display here..");
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.btnSubmit:
			myClickHandler();
			break;
		default:
			break;
		}

	}
}